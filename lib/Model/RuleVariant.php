<?php
/**
 * RuleVariant
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Groupby\RetailApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Groupby\RetailApiClient\Model;

use \ArrayAccess;
use \Groupby\RetailApiClient\ObjectSerializer;

/**
 * RuleVariant Class Doc Comment
 *
 * @category Class
 * @package  Groupby\RetailApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RuleVariant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RuleVariant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'biasing_profile_name' => 'string',
        'included_navigations' => 'string[]',
        'template' => '\Groupby\RetailApiClient\Model\RuleTemplate',
        'boosted_product_buckets' => '\Groupby\RetailApiClient\Model\BoostedProductBucket[]',
        'pinned_refinements' => '\Groupby\RetailApiClient\Model\PinnedRefinement[]',
        'sort' => '\Groupby\RetailApiClient\Model\Sort',
        'value_filters' => '\Groupby\RetailApiClient\Model\ValueFilter[]',
        'search_filters' => '\Groupby\RetailApiClient\Model\SearchFilter[]',
        'range_filters' => '\Groupby\RetailApiClient\Model\RangeFilter[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'biasing_profile_name' => null,
        'included_navigations' => null,
        'template' => null,
        'boosted_product_buckets' => null,
        'pinned_refinements' => null,
        'sort' => null,
        'value_filters' => null,
        'search_filters' => null,
        'range_filters' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'biasing_profile_name' => false,
		'included_navigations' => false,
		'template' => false,
		'boosted_product_buckets' => false,
		'pinned_refinements' => false,
		'sort' => false,
		'value_filters' => false,
		'search_filters' => false,
		'range_filters' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'biasing_profile_name' => 'biasingProfileName',
        'included_navigations' => 'includedNavigations',
        'template' => 'template',
        'boosted_product_buckets' => 'boostedProductBuckets',
        'pinned_refinements' => 'pinnedRefinements',
        'sort' => 'sort',
        'value_filters' => 'valueFilters',
        'search_filters' => 'searchFilters',
        'range_filters' => 'rangeFilters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'biasing_profile_name' => 'setBiasingProfileName',
        'included_navigations' => 'setIncludedNavigations',
        'template' => 'setTemplate',
        'boosted_product_buckets' => 'setBoostedProductBuckets',
        'pinned_refinements' => 'setPinnedRefinements',
        'sort' => 'setSort',
        'value_filters' => 'setValueFilters',
        'search_filters' => 'setSearchFilters',
        'range_filters' => 'setRangeFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'biasing_profile_name' => 'getBiasingProfileName',
        'included_navigations' => 'getIncludedNavigations',
        'template' => 'getTemplate',
        'boosted_product_buckets' => 'getBoostedProductBuckets',
        'pinned_refinements' => 'getPinnedRefinements',
        'sort' => 'getSort',
        'value_filters' => 'getValueFilters',
        'search_filters' => 'getSearchFilters',
        'range_filters' => 'getRangeFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('biasing_profile_name', $data ?? [], null);
        $this->setIfExists('included_navigations', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('boosted_product_buckets', $data ?? [], null);
        $this->setIfExists('pinned_refinements', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
        $this->setIfExists('value_filters', $data ?? [], null);
        $this->setIfExists('search_filters', $data ?? [], null);
        $this->setIfExists('range_filters', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['biasing_profile_name'] === null) {
            $invalidProperties[] = "'biasing_profile_name' can't be null";
        }
        if ($this->container['included_navigations'] === null) {
            $invalidProperties[] = "'included_navigations' can't be null";
        }
        if ($this->container['template'] === null) {
            $invalidProperties[] = "'template' can't be null";
        }
        if ($this->container['boosted_product_buckets'] === null) {
            $invalidProperties[] = "'boosted_product_buckets' can't be null";
        }
        if ($this->container['pinned_refinements'] === null) {
            $invalidProperties[] = "'pinned_refinements' can't be null";
        }
        if ($this->container['sort'] === null) {
            $invalidProperties[] = "'sort' can't be null";
        }
        if ($this->container['value_filters'] === null) {
            $invalidProperties[] = "'value_filters' can't be null";
        }
        if ($this->container['search_filters'] === null) {
            $invalidProperties[] = "'search_filters' can't be null";
        }
        if ($this->container['range_filters'] === null) {
            $invalidProperties[] = "'range_filters' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets biasing_profile_name
     *
     * @return string
     */
    public function getBiasingProfileName()
    {
        return $this->container['biasing_profile_name'];
    }

    /**
     * Sets biasing_profile_name
     *
     * @param string $biasing_profile_name biasing_profile_name
     *
     * @return self
     */
    public function setBiasingProfileName($biasing_profile_name)
    {
        if (is_null($biasing_profile_name)) {
            throw new \InvalidArgumentException('non-nullable biasing_profile_name cannot be null');
        }
        $this->container['biasing_profile_name'] = $biasing_profile_name;

        return $this;
    }

    /**
     * Gets included_navigations
     *
     * @return string[]
     */
    public function getIncludedNavigations()
    {
        return $this->container['included_navigations'];
    }

    /**
     * Sets included_navigations
     *
     * @param string[] $included_navigations included_navigations
     *
     * @return self
     */
    public function setIncludedNavigations($included_navigations)
    {
        if (is_null($included_navigations)) {
            throw new \InvalidArgumentException('non-nullable included_navigations cannot be null');
        }
        $this->container['included_navigations'] = $included_navigations;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \Groupby\RetailApiClient\Model\RuleTemplate
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \Groupby\RetailApiClient\Model\RuleTemplate $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets boosted_product_buckets
     *
     * @return \Groupby\RetailApiClient\Model\BoostedProductBucket[]
     */
    public function getBoostedProductBuckets()
    {
        return $this->container['boosted_product_buckets'];
    }

    /**
     * Sets boosted_product_buckets
     *
     * @param \Groupby\RetailApiClient\Model\BoostedProductBucket[] $boosted_product_buckets boosted_product_buckets
     *
     * @return self
     */
    public function setBoostedProductBuckets($boosted_product_buckets)
    {
        if (is_null($boosted_product_buckets)) {
            throw new \InvalidArgumentException('non-nullable boosted_product_buckets cannot be null');
        }
        $this->container['boosted_product_buckets'] = $boosted_product_buckets;

        return $this;
    }

    /**
     * Gets pinned_refinements
     *
     * @return \Groupby\RetailApiClient\Model\PinnedRefinement[]
     */
    public function getPinnedRefinements()
    {
        return $this->container['pinned_refinements'];
    }

    /**
     * Sets pinned_refinements
     *
     * @param \Groupby\RetailApiClient\Model\PinnedRefinement[] $pinned_refinements pinned_refinements
     *
     * @return self
     */
    public function setPinnedRefinements($pinned_refinements)
    {
        if (is_null($pinned_refinements)) {
            throw new \InvalidArgumentException('non-nullable pinned_refinements cannot be null');
        }
        $this->container['pinned_refinements'] = $pinned_refinements;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return \Groupby\RetailApiClient\Model\Sort
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param \Groupby\RetailApiClient\Model\Sort $sort sort
     *
     * @return self
     */
    public function setSort($sort)
    {
        if (is_null($sort)) {
            throw new \InvalidArgumentException('non-nullable sort cannot be null');
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets value_filters
     *
     * @return \Groupby\RetailApiClient\Model\ValueFilter[]
     */
    public function getValueFilters()
    {
        return $this->container['value_filters'];
    }

    /**
     * Sets value_filters
     *
     * @param \Groupby\RetailApiClient\Model\ValueFilter[] $value_filters value_filters
     *
     * @return self
     */
    public function setValueFilters($value_filters)
    {
        if (is_null($value_filters)) {
            throw new \InvalidArgumentException('non-nullable value_filters cannot be null');
        }
        $this->container['value_filters'] = $value_filters;

        return $this;
    }

    /**
     * Gets search_filters
     *
     * @return \Groupby\RetailApiClient\Model\SearchFilter[]
     */
    public function getSearchFilters()
    {
        return $this->container['search_filters'];
    }

    /**
     * Sets search_filters
     *
     * @param \Groupby\RetailApiClient\Model\SearchFilter[] $search_filters search_filters
     *
     * @return self
     */
    public function setSearchFilters($search_filters)
    {
        if (is_null($search_filters)) {
            throw new \InvalidArgumentException('non-nullable search_filters cannot be null');
        }
        $this->container['search_filters'] = $search_filters;

        return $this;
    }

    /**
     * Gets range_filters
     *
     * @return \Groupby\RetailApiClient\Model\RangeFilter[]
     */
    public function getRangeFilters()
    {
        return $this->container['range_filters'];
    }

    /**
     * Sets range_filters
     *
     * @param \Groupby\RetailApiClient\Model\RangeFilter[] $range_filters range_filters
     *
     * @return self
     */
    public function setRangeFilters($range_filters)
    {
        if (is_null($range_filters)) {
            throw new \InvalidArgumentException('non-nullable range_filters cannot be null');
        }
        $this->container['range_filters'] = $range_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


