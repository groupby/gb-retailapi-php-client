<?php
/**
 * SearchResponseDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Groupby\RetailApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Groupby\RetailApiClient\Model;

use \ArrayAccess;
use \Groupby\RetailApiClient\ObjectSerializer;

/**
 * SearchResponseDto Class Doc Comment
 *
 * @category Class
 * @description Response of calling the search API, including various elements of the original request context, matching records and general metadata relating to the results.
 * @package  Groupby\RetailApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchResponseDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchResponseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'area' => 'string',
        'query' => 'string',
        'corrected_query' => 'string',
        'biasing_profile' => 'string',
        'biasing_profile_applied_id' => 'int',
        'filter' => 'string',
        'original_request' => '\Groupby\RetailApiClient\Model\SearchRequestDto',
        'records' => '\Groupby\RetailApiClient\Model\RecordDto[]',
        'total_record_count' => 'int',
        'metadata' => '\Groupby\RetailApiClient\Model\SearchMetadataDto',
        'page_info' => '\Groupby\RetailApiClient\Model\PageInfoDto',
        'available_navigation' => '\Groupby\RetailApiClient\Model\NavigationDto[]',
        'selected_navigation' => '\Groupby\RetailApiClient\Model\NavigationDto[]',
        'redirect' => 'string',
        'experiments' => '\Groupby\RetailApiClient\Model\Experiment[]',
        'template' => '\Groupby\RetailApiClient\Model\TemplateDto',
        'empty' => 'bool',
        'site_params' => '\Groupby\RetailApiClient\Model\Metadata[]',
        'debug' => '\Groupby\RetailApiClient\Model\DebugDto',
        'warnings' => 'string[]',
        'include_expanded_results' => 'bool',
        'facet_limit' => 'int',
        'redirect_metadata' => '\Groupby\RetailApiClient\Model\Metadata[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'area' => null,
        'query' => null,
        'corrected_query' => null,
        'biasing_profile' => null,
        'biasing_profile_applied_id' => 'int32',
        'filter' => null,
        'original_request' => null,
        'records' => null,
        'total_record_count' => 'int64',
        'metadata' => null,
        'page_info' => null,
        'available_navigation' => null,
        'selected_navigation' => null,
        'redirect' => null,
        'experiments' => null,
        'template' => null,
        'empty' => null,
        'site_params' => null,
        'debug' => null,
        'warnings' => null,
        'include_expanded_results' => null,
        'facet_limit' => 'int32',
        'redirect_metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'area' => false,
		'query' => false,
		'corrected_query' => false,
		'biasing_profile' => false,
		'biasing_profile_applied_id' => false,
		'filter' => false,
		'original_request' => false,
		'records' => false,
		'total_record_count' => false,
		'metadata' => false,
		'page_info' => false,
		'available_navigation' => false,
		'selected_navigation' => false,
		'redirect' => false,
		'experiments' => false,
		'template' => false,
		'empty' => false,
		'site_params' => false,
		'debug' => false,
		'warnings' => false,
		'include_expanded_results' => false,
		'facet_limit' => false,
		'redirect_metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'area' => 'area',
        'query' => 'query',
        'corrected_query' => 'correctedQuery',
        'biasing_profile' => 'biasingProfile',
        'biasing_profile_applied_id' => 'biasingProfileAppliedId',
        'filter' => 'filter',
        'original_request' => 'originalRequest',
        'records' => 'records',
        'total_record_count' => 'totalRecordCount',
        'metadata' => 'metadata',
        'page_info' => 'pageInfo',
        'available_navigation' => 'availableNavigation',
        'selected_navigation' => 'selectedNavigation',
        'redirect' => 'redirect',
        'experiments' => 'experiments',
        'template' => 'template',
        'empty' => 'empty',
        'site_params' => 'siteParams',
        'debug' => 'debug',
        'warnings' => 'warnings',
        'include_expanded_results' => 'includeExpandedResults',
        'facet_limit' => 'facetLimit',
        'redirect_metadata' => 'redirectMetadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'area' => 'setArea',
        'query' => 'setQuery',
        'corrected_query' => 'setCorrectedQuery',
        'biasing_profile' => 'setBiasingProfile',
        'biasing_profile_applied_id' => 'setBiasingProfileAppliedId',
        'filter' => 'setFilter',
        'original_request' => 'setOriginalRequest',
        'records' => 'setRecords',
        'total_record_count' => 'setTotalRecordCount',
        'metadata' => 'setMetadata',
        'page_info' => 'setPageInfo',
        'available_navigation' => 'setAvailableNavigation',
        'selected_navigation' => 'setSelectedNavigation',
        'redirect' => 'setRedirect',
        'experiments' => 'setExperiments',
        'template' => 'setTemplate',
        'empty' => 'setEmpty',
        'site_params' => 'setSiteParams',
        'debug' => 'setDebug',
        'warnings' => 'setWarnings',
        'include_expanded_results' => 'setIncludeExpandedResults',
        'facet_limit' => 'setFacetLimit',
        'redirect_metadata' => 'setRedirectMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'area' => 'getArea',
        'query' => 'getQuery',
        'corrected_query' => 'getCorrectedQuery',
        'biasing_profile' => 'getBiasingProfile',
        'biasing_profile_applied_id' => 'getBiasingProfileAppliedId',
        'filter' => 'getFilter',
        'original_request' => 'getOriginalRequest',
        'records' => 'getRecords',
        'total_record_count' => 'getTotalRecordCount',
        'metadata' => 'getMetadata',
        'page_info' => 'getPageInfo',
        'available_navigation' => 'getAvailableNavigation',
        'selected_navigation' => 'getSelectedNavigation',
        'redirect' => 'getRedirect',
        'experiments' => 'getExperiments',
        'template' => 'getTemplate',
        'empty' => 'getEmpty',
        'site_params' => 'getSiteParams',
        'debug' => 'getDebug',
        'warnings' => 'getWarnings',
        'include_expanded_results' => 'getIncludeExpandedResults',
        'facet_limit' => 'getFacetLimit',
        'redirect_metadata' => 'getRedirectMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('area', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('corrected_query', $data ?? [], null);
        $this->setIfExists('biasing_profile', $data ?? [], null);
        $this->setIfExists('biasing_profile_applied_id', $data ?? [], null);
        $this->setIfExists('filter', $data ?? [], null);
        $this->setIfExists('original_request', $data ?? [], null);
        $this->setIfExists('records', $data ?? [], null);
        $this->setIfExists('total_record_count', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('page_info', $data ?? [], null);
        $this->setIfExists('available_navigation', $data ?? [], null);
        $this->setIfExists('selected_navigation', $data ?? [], null);
        $this->setIfExists('redirect', $data ?? [], null);
        $this->setIfExists('experiments', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('empty', $data ?? [], null);
        $this->setIfExists('site_params', $data ?? [], null);
        $this->setIfExists('debug', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
        $this->setIfExists('include_expanded_results', $data ?? [], null);
        $this->setIfExists('facet_limit', $data ?? [], null);
        $this->setIfExists('redirect_metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['filter'] === null) {
            $invalidProperties[] = "'filter' can't be null";
        }
        if ($this->container['original_request'] === null) {
            $invalidProperties[] = "'original_request' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['page_info'] === null) {
            $invalidProperties[] = "'page_info' can't be null";
        }
        if ($this->container['available_navigation'] === null) {
            $invalidProperties[] = "'available_navigation' can't be null";
        }
        if ($this->container['selected_navigation'] === null) {
            $invalidProperties[] = "'selected_navigation' can't be null";
        }
        if ($this->container['experiments'] === null) {
            $invalidProperties[] = "'experiments' can't be null";
        }
        if ($this->container['template'] === null) {
            $invalidProperties[] = "'template' can't be null";
        }
        if ($this->container['site_params'] === null) {
            $invalidProperties[] = "'site_params' can't be null";
        }
        if ($this->container['debug'] === null) {
            $invalidProperties[] = "'debug' can't be null";
        }
        if ($this->container['redirect_metadata'] === null) {
            $invalidProperties[] = "'redirect_metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the search.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets area
     *
     * @return string|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string|null $area Area Id the search was performed in.
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string|null $query Original search query.
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets corrected_query
     *
     * @return string|null
     */
    public function getCorrectedQuery()
    {
        return $this->container['corrected_query'];
    }

    /**
     * Sets corrected_query
     *
     * @param string|null $corrected_query Search query after any changes/corrections are done by the engine.
     *
     * @return self
     */
    public function setCorrectedQuery($corrected_query)
    {
        if (is_null($corrected_query)) {
            throw new \InvalidArgumentException('non-nullable corrected_query cannot be null');
        }
        $this->container['corrected_query'] = $corrected_query;

        return $this;
    }

    /**
     * Gets biasing_profile
     *
     * @return string|null
     */
    public function getBiasingProfile()
    {
        return $this->container['biasing_profile'];
    }

    /**
     * Sets biasing_profile
     *
     * @param string|null $biasing_profile Name of the biasing profile which was used to bias products in the search results.
     *
     * @return self
     */
    public function setBiasingProfile($biasing_profile)
    {
        if (is_null($biasing_profile)) {
            throw new \InvalidArgumentException('non-nullable biasing_profile cannot be null');
        }
        $this->container['biasing_profile'] = $biasing_profile;

        return $this;
    }

    /**
     * Gets biasing_profile_applied_id
     *
     * @return int|null
     */
    public function getBiasingProfileAppliedId()
    {
        return $this->container['biasing_profile_applied_id'];
    }

    /**
     * Sets biasing_profile_applied_id
     *
     * @param int|null $biasing_profile_applied_id Id of the biasing profile which was used to bias products in the search results.
     *
     * @return self
     */
    public function setBiasingProfileAppliedId($biasing_profile_applied_id)
    {
        if (is_null($biasing_profile_applied_id)) {
            throw new \InvalidArgumentException('non-nullable biasing_profile_applied_id cannot be null');
        }
        $this->container['biasing_profile_applied_id'] = $biasing_profile_applied_id;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string $filter filter
     *
     * @return self
     */
    public function setFilter($filter)
    {
        if (is_null($filter)) {
            throw new \InvalidArgumentException('non-nullable filter cannot be null');
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets original_request
     *
     * @return \Groupby\RetailApiClient\Model\SearchRequestDto
     */
    public function getOriginalRequest()
    {
        return $this->container['original_request'];
    }

    /**
     * Sets original_request
     *
     * @param \Groupby\RetailApiClient\Model\SearchRequestDto $original_request original_request
     *
     * @return self
     */
    public function setOriginalRequest($original_request)
    {
        if (is_null($original_request)) {
            throw new \InvalidArgumentException('non-nullable original_request cannot be null');
        }
        $this->container['original_request'] = $original_request;

        return $this;
    }

    /**
     * Gets records
     *
     * @return \Groupby\RetailApiClient\Model\RecordDto[]|null
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param \Groupby\RetailApiClient\Model\RecordDto[]|null $records The list of records that match the search.
     *
     * @return self
     */
    public function setRecords($records)
    {
        if (is_null($records)) {
            throw new \InvalidArgumentException('non-nullable records cannot be null');
        }
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets total_record_count
     *
     * @return int|null
     */
    public function getTotalRecordCount()
    {
        return $this->container['total_record_count'];
    }

    /**
     * Sets total_record_count
     *
     * @param int|null $total_record_count The total number of products that match the search. If all products were filtered out on S4R site equals to 0.
     *
     * @return self
     */
    public function setTotalRecordCount($total_record_count)
    {
        if (is_null($total_record_count)) {
            throw new \InvalidArgumentException('non-nullable total_record_count cannot be null');
        }
        $this->container['total_record_count'] = $total_record_count;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Groupby\RetailApiClient\Model\SearchMetadataDto
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Groupby\RetailApiClient\Model\SearchMetadataDto $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets page_info
     *
     * @return \Groupby\RetailApiClient\Model\PageInfoDto
     */
    public function getPageInfo()
    {
        return $this->container['page_info'];
    }

    /**
     * Sets page_info
     *
     * @param \Groupby\RetailApiClient\Model\PageInfoDto $page_info page_info
     *
     * @return self
     */
    public function setPageInfo($page_info)
    {
        if (is_null($page_info)) {
            throw new \InvalidArgumentException('non-nullable page_info cannot be null');
        }
        $this->container['page_info'] = $page_info;

        return $this;
    }

    /**
     * Gets available_navigation
     *
     * @return \Groupby\RetailApiClient\Model\NavigationDto[]
     */
    public function getAvailableNavigation()
    {
        return $this->container['available_navigation'];
    }

    /**
     * Sets available_navigation
     *
     * @param \Groupby\RetailApiClient\Model\NavigationDto[] $available_navigation available_navigation
     *
     * @return self
     */
    public function setAvailableNavigation($available_navigation)
    {
        if (is_null($available_navigation)) {
            throw new \InvalidArgumentException('non-nullable available_navigation cannot be null');
        }
        $this->container['available_navigation'] = $available_navigation;

        return $this;
    }

    /**
     * Gets selected_navigation
     *
     * @return \Groupby\RetailApiClient\Model\NavigationDto[]
     */
    public function getSelectedNavigation()
    {
        return $this->container['selected_navigation'];
    }

    /**
     * Sets selected_navigation
     *
     * @param \Groupby\RetailApiClient\Model\NavigationDto[] $selected_navigation selected_navigation
     *
     * @return self
     */
    public function setSelectedNavigation($selected_navigation)
    {
        if (is_null($selected_navigation)) {
            throw new \InvalidArgumentException('non-nullable selected_navigation cannot be null');
        }
        $this->container['selected_navigation'] = $selected_navigation;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return string|null
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param string|null $redirect URL to which the merchandiser should redirect the shopper to.
     *
     * @return self
     */
    public function setRedirect($redirect)
    {
        if (is_null($redirect)) {
            throw new \InvalidArgumentException('non-nullable redirect cannot be null');
        }
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets experiments
     *
     * @return \Groupby\RetailApiClient\Model\Experiment[]
     */
    public function getExperiments()
    {
        return $this->container['experiments'];
    }

    /**
     * Sets experiments
     *
     * @param \Groupby\RetailApiClient\Model\Experiment[] $experiments experiments
     *
     * @return self
     */
    public function setExperiments($experiments)
    {
        if (is_null($experiments)) {
            throw new \InvalidArgumentException('non-nullable experiments cannot be null');
        }
        $this->container['experiments'] = $experiments;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \Groupby\RetailApiClient\Model\TemplateDto
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \Groupby\RetailApiClient\Model\TemplateDto $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets empty
     *
     * @return bool|null
     */
    public function getEmpty()
    {
        return $this->container['empty'];
    }

    /**
     * Sets empty
     *
     * @param bool|null $empty True if the search yielded no results, otherwise false.
     *
     * @return self
     */
    public function setEmpty($empty)
    {
        if (is_null($empty)) {
            throw new \InvalidArgumentException('non-nullable empty cannot be null');
        }
        $this->container['empty'] = $empty;

        return $this;
    }

    /**
     * Gets site_params
     *
     * @return \Groupby\RetailApiClient\Model\Metadata[]
     */
    public function getSiteParams()
    {
        return $this->container['site_params'];
    }

    /**
     * Sets site_params
     *
     * @param \Groupby\RetailApiClient\Model\Metadata[] $site_params site_params
     *
     * @return self
     */
    public function setSiteParams($site_params)
    {
        if (is_null($site_params)) {
            throw new \InvalidArgumentException('non-nullable site_params cannot be null');
        }
        $this->container['site_params'] = $site_params;

        return $this;
    }

    /**
     * Gets debug
     *
     * @return \Groupby\RetailApiClient\Model\DebugDto
     */
    public function getDebug()
    {
        return $this->container['debug'];
    }

    /**
     * Sets debug
     *
     * @param \Groupby\RetailApiClient\Model\DebugDto $debug debug
     *
     * @return self
     */
    public function setDebug($debug)
    {
        if (is_null($debug)) {
            throw new \InvalidArgumentException('non-nullable debug cannot be null');
        }
        $this->container['debug'] = $debug;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[]|null $warnings Warning messages containing information about invalid products, etc.
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets include_expanded_results
     *
     * @return bool|null
     */
    public function getIncludeExpandedResults()
    {
        return $this->container['include_expanded_results'];
    }

    /**
     * Sets include_expanded_results
     *
     * @param bool|null $include_expanded_results When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \"Google Pixel 5\" without query expansion, you might only get \"google_pixel_5\" in the result. With query expansion, you might get \"google_pixel_4a_with_5g\", \"google_pixel_4a\" and \"google_pixel_5_case\" as well.The default value is configured in the tenant settings or true if there is no such setting
     *
     * @return self
     */
    public function setIncludeExpandedResults($include_expanded_results)
    {
        if (is_null($include_expanded_results)) {
            throw new \InvalidArgumentException('non-nullable include_expanded_results cannot be null');
        }
        $this->container['include_expanded_results'] = $include_expanded_results;

        return $this;
    }

    /**
     * Gets facet_limit
     *
     * @return int|null
     */
    public function getFacetLimit()
    {
        return $this->container['facet_limit'];
    }

    /**
     * Sets facet_limit
     *
     * @param int|null $facet_limit Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project.
     *
     * @return self
     */
    public function setFacetLimit($facet_limit)
    {
        if (is_null($facet_limit)) {
            throw new \InvalidArgumentException('non-nullable facet_limit cannot be null');
        }
        $this->container['facet_limit'] = $facet_limit;

        return $this;
    }

    /**
     * Gets redirect_metadata
     *
     * @return \Groupby\RetailApiClient\Model\Metadata[]
     */
    public function getRedirectMetadata()
    {
        return $this->container['redirect_metadata'];
    }

    /**
     * Sets redirect_metadata
     *
     * @param \Groupby\RetailApiClient\Model\Metadata[] $redirect_metadata redirect_metadata
     *
     * @return self
     */
    public function setRedirectMetadata($redirect_metadata)
    {
        if (is_null($redirect_metadata)) {
            throw new \InvalidArgumentException('non-nullable redirect_metadata cannot be null');
        }
        $this->container['redirect_metadata'] = $redirect_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


