<?php
/**
 * SearchResults
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Groupby\RetailApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Groupby\RetailApiClient\Model;

use \ArrayAccess;
use \Groupby\RetailApiClient\ObjectSerializer;

/**
 * SearchResults Class Doc Comment
 *
 * @category Class
 * @description SAYT response. Contains list of suggestions ad base response information.
 * @package  Groupby\RetailApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchResults implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stats' => '\Groupby\RetailApiClient\Model\SearchResultsStats',
        'search_terms' => '\Groupby\RetailApiClient\Model\SearchTerms[]',
        'extended_attributes' => 'array<string,string[]>',
        'attribute_results' => 'array<string,\Groupby\RetailApiClient\Model\AttributeSuggestion>',
        'site_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stats' => null,
        'search_terms' => null,
        'extended_attributes' => null,
        'attribute_results' => null,
        'site_filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'stats' => false,
		'search_terms' => false,
		'extended_attributes' => false,
		'attribute_results' => false,
		'site_filter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stats' => 'stats',
        'search_terms' => 'searchTerms',
        'extended_attributes' => 'extendedAttributes',
        'attribute_results' => 'attributeResults',
        'site_filter' => 'siteFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stats' => 'setStats',
        'search_terms' => 'setSearchTerms',
        'extended_attributes' => 'setExtendedAttributes',
        'attribute_results' => 'setAttributeResults',
        'site_filter' => 'setSiteFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stats' => 'getStats',
        'search_terms' => 'getSearchTerms',
        'extended_attributes' => 'getExtendedAttributes',
        'attribute_results' => 'getAttributeResults',
        'site_filter' => 'getSiteFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('search_terms', $data ?? [], null);
        $this->setIfExists('extended_attributes', $data ?? [], null);
        $this->setIfExists('attribute_results', $data ?? [], null);
        $this->setIfExists('site_filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['search_terms'] === null) {
            $invalidProperties[] = "'search_terms' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stats
     *
     * @return \Groupby\RetailApiClient\Model\SearchResultsStats|null
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Groupby\RetailApiClient\Model\SearchResultsStats|null $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets search_terms
     *
     * @return \Groupby\RetailApiClient\Model\SearchTerms[]
     */
    public function getSearchTerms()
    {
        return $this->container['search_terms'];
    }

    /**
     * Sets search_terms
     *
     * @param \Groupby\RetailApiClient\Model\SearchTerms[] $search_terms search_terms
     *
     * @return self
     */
    public function setSearchTerms($search_terms)
    {
        if (is_null($search_terms)) {
            throw new \InvalidArgumentException('non-nullable search_terms cannot be null');
        }
        $this->container['search_terms'] = $search_terms;

        return $this;
    }

    /**
     * Gets extended_attributes
     *
     * @return array<string,string[]>|null
     */
    public function getExtendedAttributes()
    {
        return $this->container['extended_attributes'];
    }

    /**
     * Sets extended_attributes
     *
     * @param array<string,string[]>|null $extended_attributes Map with extended attributes which are returned in autocomplete response.
     *
     * @return self
     */
    public function setExtendedAttributes($extended_attributes)
    {
        if (is_null($extended_attributes)) {
            throw new \InvalidArgumentException('non-nullable extended_attributes cannot be null');
        }
        $this->container['extended_attributes'] = $extended_attributes;

        return $this;
    }

    /**
     * Gets attribute_results
     *
     * @return array<string,\Groupby\RetailApiClient\Model\AttributeSuggestion>|null
     */
    public function getAttributeResults()
    {
        return $this->container['attribute_results'];
    }

    /**
     * Sets attribute_results
     *
     * @param array<string,\Groupby\RetailApiClient\Model\AttributeSuggestion>|null $attribute_results SAYT response attributes. Contains list of direct matching attributes.
     *
     * @return self
     */
    public function setAttributeResults($attribute_results)
    {
        if (is_null($attribute_results)) {
            throw new \InvalidArgumentException('non-nullable attribute_results cannot be null');
        }
        $this->container['attribute_results'] = $attribute_results;

        return $this;
    }

    /**
     * Gets site_filter
     *
     * @return string|null
     */
    public function getSiteFilter()
    {
        return $this->container['site_filter'];
    }

    /**
     * Sets site_filter
     *
     * @param string|null $site_filter SiteFilter object used with request.
     *
     * @return self
     */
    public function setSiteFilter($site_filter)
    {
        if (is_null($site_filter)) {
            throw new \InvalidArgumentException('non-nullable site_filter cannot be null');
        }
        $this->container['site_filter'] = $site_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


